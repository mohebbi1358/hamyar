from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.views.decorators.csrf import csrf_exempt
from django.contrib import messages
from martyrs.models import Martyr
from eternals.models import Eternals
from wallet.models import Wallet, WalletTransaction
from donation.models import Donation
import random
from donation.models import DonationCause
from .views import process_wallet_donation



@login_required
def donate(request):
    causes = DonationCause.objects.filter(is_active=True)

    martyr = None
    count = Martyr.objects.count()
    if count > 0:
        martyr = Martyr.objects.all()[random.randint(0, count - 1)]

    if request.method == 'POST':
        amount_str = request.POST.get('amount', '').replace(',', '')
        cause_id = request.POST.get('cause')
        pay_method = request.POST.get('pay_method')

        try:
            amount = int(amount_str)
            if amount < 1000:
                messages.error(request, "حداقل مبلغ ۱۰۰۰ تومان است.")
                return redirect('donation:donate')
        except ValueError:
            messages.error(request, "مبلغ وارد شده معتبر نیست.")
            return redirect('donation:donate')

        if not cause_id:
            messages.error(request, "لطفاً دلیل صدقه را انتخاب کنید.")
            return redirect('donation:donate')

        cause_obj = get_object_or_404(DonationCause, id=cause_id)

        if pay_method == 'wallet':
            success, error_msg = process_wallet_donation(request.user, amount, cause_obj)
            if not success:
                messages.error(request, error_msg)
                return redirect('donation:donate')

            messages.success(request, "پرداخت از طریق کیف پول با موفقیت انجام شد.")
            return redirect('wallet:wallet_transactions_report')

        elif pay_method == 'gateway':
            donation = Donation.objects.create(
                amount=amount,
                cause=cause_obj,
                status='PENDING',
                user=request.user
            )
            return redirect('donation:fake_gateway', donation_id=donation.id)

        else:
            messages.error(request, "روش پرداخت نامعتبر است.")
            return redirect('donation:donate')

    suggested_amounts = [10000, 25000, 40000, 60000, 100000]
    return render(request, 'donation/donate.html', {
        'causes': causes,
        'suggested_amounts': suggested_amounts,
        'martyr': martyr,
        'eternal': None,
    })


@login_required
def donate_for_eternal(request, eternal_id):
    causes = DonationCause.objects.filter(is_active=True)
    eternal = get_object_or_404(Eternals, pk=eternal_id)

    if request.method == 'POST':
        amount_str = request.POST.get('amount', '').replace(',', '')
        pay_method = request.POST.get('pay_method')
        cause_id = request.POST.get('cause')

        try:
            amount = int(amount_str)
            if amount < 1000:
                messages.error(request, "حداقل مبلغ ۱۰۰۰ تومان است.")
                return redirect('donate_for_eternal', eternal_id=eternal_id)
        except ValueError:
            messages.error(request, "مبلغ وارد شده معتبر نیست.")
            return redirect('donate_for_eternal', eternal_id=eternal_id)

        if not cause_id:
            messages.error(request, "لطفاً دلیل صدقه را انتخاب کنید.")
            return redirect('donate_for_eternal', eternal_id=eternal_id)

        cause_obj = get_object_or_404(DonationCause, id=cause_id)
        # تغییر فقط متن دلیل (برای تراکنش)
        cause_text = f"{cause_obj.title} برای {eternal.first_name} {eternal.last_name}"

        if pay_method == 'wallet':
            success, error_msg = process_wallet_donation(
                request.user, amount, cause_obj, martyr=None, eternal=eternal)
            if not success:
                messages.error(request, error_msg)
                return redirect('donate_for_eternal', eternal_id=eternal_id)

            messages.success(request, "پرداخت از طریق کیف پول با موفقیت انجام شد.")
            return redirect('eternals:detail', pk=eternal_id)

        elif pay_method == 'gateway':
            donation = Donation.objects.create(
                amount=amount,
                cause=cause_obj,
                status='PENDING',
                user=request.user,
                eternal=eternal
            )
            return redirect('donation:fake_gateway', donation_id=donation.id)

        else:
            messages.error(request, "روش پرداخت نامعتبر است.")
            return redirect('donate_for_eternal', eternal_id=eternal_id)

    suggested_amounts = [10000, 25000, 40000, 60000, 100000]
    return render(request, 'donation/donate.html', {
        'causes': causes,
        'eternal': eternal,
        'martyr': None,
        'suggested_amounts': suggested_amounts,
    })


@login_required
def donate_for_martyr(request, martyr_id):
    causes = DonationCause.objects.filter(is_active=True)
    martyr = get_object_or_404(Martyr, pk=martyr_id)

    if request.method == 'POST':
        amount_str = request.POST.get('amount', '').replace(',', '')
        pay_method = request.POST.get('pay_method')
        cause_id = request.POST.get('cause')

        try:
            amount = int(amount_str)
            if amount < 1000:
                messages.error(request, "حداقل مبلغ ۱۰۰۰ تومان است.")
                return redirect('donation:donate_for_martyr', martyr_id=martyr_id)
        except ValueError:
            messages.error(request, "مبلغ وارد شده معتبر نیست.")
            return redirect('donation:donate_for_martyr', martyr_id=martyr_id)

        if not cause_id:
            messages.error(request, "لطفاً دلیل صدقه را انتخاب کنید.")
            return redirect('donation:donate_for_martyr', martyr_id=martyr_id)

        cause_obj = get_object_or_404(DonationCause, id=cause_id)
        cause_text = f"{cause_obj.title} برای {martyr.first_name} {martyr.last_name}"

        if pay_method == 'wallet':
            success, error_msg = process_wallet_donation(
                request.user, amount, cause_obj, martyr=martyr, eternal=None)
            if not success:
                messages.error(request, error_msg)
                return redirect('donation:donate_for_martyr', martyr_id=martyr_id)

            messages.success(request, "پرداخت از طریق کیف پول با موفقیت انجام شد.")
            return redirect('wallet:wallet_transactions_report')

        elif pay_method == 'gateway':
            donation = Donation.objects.create(
                amount=amount,
                cause=cause_obj,
                status='PENDING',
                user=request.user,
                martyr=martyr
            )
            return redirect('donation:fake_gateway', donation_id=donation.id)

        else:
            messages.error(request, "روش پرداخت نامعتبر است.")
            return redirect('donation:donate_for_martyr', martyr_id=martyr_id)

    suggested_amounts = [10000, 25000, 40000, 60000, 100000]
    return render(request, 'donation/donate.html', {
        'causes': causes,
        'martyr': martyr,
        'eternal': None,
        'suggested_amounts': suggested_amounts,
    })


@csrf_exempt
def payment_callback(request, donation_id):
    donation = get_object_or_404(Donation, id=donation_id)

    status = request.GET.get('status', 'FAILED')
    ref_id = request.GET.get('ref_id', '')
    gateway_response = str(dict(request.GET))

    donation.status = 'SUCCESS' if status == 'OK' else 'FAILED'
    donation.ref_id = ref_id
    donation.gateway_response = gateway_response
    donation.save()

    if status == 'OK':
        messages.success(request, "پرداخت با موفقیت انجام شد.")
        return redirect('home')
    else:
        messages.error(request, "پرداخت ناموفق بود. لطفاً دوباره تلاش کنید.")
        return redirect('donation:donate')


def fake_bank_gateway(request, donation_id):
    donation = get_object_or_404(Donation, id=donation_id)
    return render(request, 'donation/fake_gateway.html', {'donation': donation})


def fake_wallet_charge_gateway(request, wallet_tx_id):
    wallet_tx = get_object_or_404(WalletTransaction, id=wallet_tx_id)
    return redirect(f'/wallet/charge/callback/{wallet_tx.id}/?status=OK&ref_id=FAKE12345')



# donation/views.py
from django.contrib.admin.views.decorators import staff_member_required
from django.shortcuts import render, redirect, get_object_or_404
from .models import DonationCause
from .forms import DonationCauseForm

@staff_member_required
def donationcause_list(request):
    causes = DonationCause.objects.all()
    return render(request, 'donation/donationcause_list.html', {'causes': causes})

@staff_member_required
def donationcause_create(request):
    if request.method == 'POST':
        form = DonationCauseForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('donation:donationcause_list')
    else:
        form = DonationCauseForm()
    return render(request, 'donation/donationcause_form.html', {'form': form})

@staff_member_required
def donationcause_edit(request, pk):
    cause = get_object_or_404(DonationCause, pk=pk)
    if request.method == 'POST':
        form = DonationCauseForm(request.POST, instance=cause)
        if form.is_valid():
            form.save()
            return redirect('donation:donationcause_list')
    else:
        form = DonationCauseForm(instance=cause)
    return render(request, 'donation/donationcause_form.html', {'form': form})

@staff_member_required
def donationcause_delete(request, pk):
    cause = get_object_or_404(DonationCause, pk=pk)
    if request.method == 'POST':
        cause.delete()
        return redirect('donation:donationcause_list')
    return render(request, 'donation/donationcause_confirm_delete.html', {'cause': cause})





این هم ویوی
def process_wallet_donation(user, amount, cause_obj, martyr=None, eternal=None):
    wallet = Wallet.objects.filter(user=user).first()
    if not wallet:
        return False, "کیف پول شما فعال نیست."
    if wallet.balance < amount:
        return False, "موجودی کیف پول کافی نیست."

    wallet.balance -= amount
    wallet.save()

    WalletTransaction.objects.create(
        wallet=wallet,
        amount=amount,
        transaction_type='DONATION',
        status='SUCCESS',
        cause=cause_obj
    )

    Donation.objects.create(
        amount=amount,
        cause=cause_obj,
        status='SUCCESS',
        user=user,
        martyr=martyr,
        eternal=eternal
    )

    return True, None


